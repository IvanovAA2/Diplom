class Node
{
    p;
    pchar;
    exit    = -1;
    link    = -1;
    leaf    = [];
    next    = [-1] * 26;
    go      = [-1] * 26;
    
    constructor (p = -1, pchar = -1)
    {
        this.p      = p;
        this.pchar  = pchar;
    }
}

var code_of_a = "a".codeOfChar(0);
function order (s, i)
{
    return s.codeOfChar(i) - code_of_a;
}

class AhoCorasick
{
    t = [new Node()];
    
    Link (cur)
    {
        var t = this.t;
        
        if (t[cur].link === -1)
        {
            if (cur === 0 or t[cur].p === 0)
            {
                t[cur].link = 0;
            }
            else
            {
                t[cur].link = this.Go(this.Link(t[cur].p), t[cur].pchar);
            }
        }
        
        return t[cur].link;
    }
    
    Go (cur, c)
    {
        var t = this.t;
        
        if (t[cur].go[c] === -1)
        {
            if (t[cur].next[c] === -1)
            {
                if (cur === 0)
                {
                    t[cur].go[c] = 0;
                }
                else
                {
                    t[cur].go[c] = this.Go(this.Link(cur), c);
                }
            }
            else
            {
                t[cur].go[c] = t[cur].next[c];
            }
        }
        
        return t[cur].go[c];
    }
    
    Exit (cur)
    {
        var t = this.t;
        if (t[cur].exit === -1)
        {
            if (cur === 0 or this.Link(cur) === 0)
            {
                t[cur].exit = 0;
            }
            else
            {
                if (t[this.Link(cur)].leaf.size())
                {
                    t[cur].exit = this.Link(cur);
                }
                else
                {
                    t[cur].exit = this.Exit(this.Link(cur));
                }
            }
        }
        
        return t[cur].exit;
    }
    
    Add (word, index)
    {
        var cur = 0, t = this.t;
        
        for (var i = 0; i < word.size(); i += 1)
        {
            var ord = order(word, i);
        
            if (t[cur].next[ord] === -1)
            {
                t[cur].next[ord] = t.size();
                t.push(new Node(cur, ord));
            }
            
            cur = t[cur].next[ord];
        }
        
        t[cur].leaf.push(index);
    }
    
    solve (text, words)
    {
        var n = words.size(), t = this.t;
        var ans = [0] * n, count = [0] * t.size();
        
        var cur = 0;
        for (var i = 0; i < text.size(); i += 1)
        {
            cur = this.Go(cur, order(text, i));
            
            count[cur] += 1;
        }
        
        for (var cur = 0; cur < t.size(); cur += 1)
        {
            if (count[cur])
            {
                for (var node = cur; node !== 0; node = this.Exit(node))
                {
                    for (var i = 0; i < t[node].leaf.size(); i += 1)
                    {
                        ans[t[node].leaf[i]] += count[cur];
                    }
                }
            }
        }
        
        for (var i = 0; i < n; i += 1)
        {
            println(words[i] + ": \t" + ans[i]);
        }
    }
}

var words = 
[
    "a",
    "aa",
    "abc",
    "abcde",
    "bcd",
    "ee"
];
var text = "abcdeeaabcdcdeabcdacb";

var ac = new AhoCorasick();
for (var i = 0; i < words.size(); i += 1)
{
    ac.Add(words[i], i);    
}
ac.solve(text, words);