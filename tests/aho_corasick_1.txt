var t = [];

# 0 - parent index     = -1
# 1 - parent char      = -1
# 2 - exit             = -1
# 3 - link             = -1
# 4 - leaf             = []
# 5 - next             = [-1] * 26
# 6 - go               = [-1] * 26

var p       = 0;
var pchar   = 1;
var exit    = 2;
var link    = 3;
var leaf    = 4;
var next    = 5;
var go      = 6;

function AddNode (p = -1, pchar = -1)
{
    t.push
    ([
        p, pchar,
        -1, -1,
        [],
        [-1] * 26, [-1] * 26
    ]);
    
    return t.size() - 1;
}

AddNode();

var a = "a".codeOfChar(0);
function Order (s, i)
{
    return s.codeOfChar(i) - a;
}

function Go () {}

function Link (cur)
{
    if (t[cur][link] === -1)
    {
        if (cur === 0 or t[cur][p] === 0)
        {
            t[cur][link] = 0;
        }
        else
        {
            t[cur][link] = Go(Link(t[cur][p]), t[cur][pchar]);
        }
    }
    return t[cur][link];
}

function Go (cur, c)
{
    if (t[cur][go][c] === -1)
    {
        if (t[cur][next][c] === -1)
        {
            if (cur === 0)
            {
                t[cur][go][c] = 0;
            }
            else
            {
                t[cur][go][c] = Go(Link(cur), c);
            }
        }
        else
        {
            t[cur][go][c] = t[cur][next][c];
        }
    }
    
    return t[cur][go][c];
}

function Exit (cur)
{
    if (t[cur][exit] === -1)
    {
        if (cur === 0 or Link(cur) === 0)
        {
            t[cur][exit] = 0;
        }
        else
        {
            if (t[Link(cur)][leaf].size())
            {
                t[cur][exit] = Link(cur);
            }
            else
            {
                t[cur][exit] = Exit(Link(cur));
            }
        }
    }
    
    return t[cur][exit];
}

function Add (word, index)
{
    var cur = 0;
    
    for (var i = 0; i < word.size(); i += 1)
    {
        var ord = Order(word, i);
    
        if (t[cur][next][ord] === -1)
        {
            t[cur][next][ord] = 
            AddNode(cur, ord);
        }
        
        cur = t[cur][next][ord];
    }
    
    t[cur][leaf].push(index);
}

function Solve (text, words)
{
    var n = words.size();
    var ans = [0] * n, count = [0] * t.size();
    
    var cur = 0;
    for (var i = 0; i < text.size(); i += 1)
    {
        cur = Go(cur, Order(text, i));
        
        count[cur] += 1;
    }
    
    for (var cur = 0; cur < t.size(); cur += 1)
    {
        if (count[cur])
        {
            for (var node = cur; node !== 0; node = Exit(node))
            {
                for (var i = 0; i < t[node][leaf].size(); i += 1)
                {
                    ans[t[node][leaf][i]] += count[cur];
                }
            }
        }
    }
    
    for (var i = 0; i < n; i += 1)
    {
        println(words[i] + ": \t" + ans[i]);
    }
}

var words = 
[
    "a",
    "aa",
    "abc",
    "abcde",
    "bcd",
    "ee"
];
var text = "abcdeeaabcdcdeabcdacb";

for (var i = 0; i < words.size(); i += 1)
{
    Add(words[i], i);
}
Solve(text, words);